// rules_version = '2';

// service cloud.firestore {
//   match /databases/{database}/documents {

//     // This rule allows anyone with your Firestore database reference to view, edit,
//     // and delete all data in your Firestore database. It is useful for getting
//     // started, but it is configured to expire after 30 days because it
//     // leaves your app open to attackers. At that time, all client
//     // requests to your Firestore database will be denied.
//     //
//     // Make sure to write security rules for your app before that time, or else
//     // all client requests to your Firestore database will be denied until you Update
//     // your rules
//     match /{document=**} {
//       allow read, write: if request.time < timestamp.date(2025, 10, 27);
//     }
//   }
// }

rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // ========================================
    // Helper Functions
    // ========================================
    
    function isSignedIn() {
      return request.auth != null;
    }
    
    function getUserData() {
      return get(/databases/$(database)/documents/users/$(request.auth.token.email)).data;
    }
    
    function getUserRole() {
      return getUserData().role;
    }
    
    function getUserDepartment() {
      return getUserData().department;
    }
    
    function isDirector() {
      return isSignedIn() && getUserRole() == 'director';
    }
    
    function isManager() {
      return isSignedIn() && getUserRole() == 'manager';
    }
    
    function isHR() {
      return isSignedIn() && getUserRole() == 'hr';
    }
    
    function isStaff() {
      return isSignedIn() && getUserRole() == 'staff';
    }
    
    // Check if user is involved in a project (member or creator)
    function isProjectMember(projectData) {
      return request.auth.token.email in projectData.members ||
             request.auth.token.email == projectData.createdBy;
    }
    
    // Check if user is the creator/owner
    function isOwner(resourceData) {
      return request.auth.token.email == resourceData.createdBy;
    }
    
    // ========================================
    // Users Collection
    // ========================================
    match /users/{email} {
      // Everyone can read their own profile
      allow read: if isSignedIn() && request.auth.token.email == email;
      
      // Directors can read all users
      allow read: if isDirector();
      
      // Managers can read users in their department
      allow read: if isManager() && 
                     getUserDepartment() == resource.data.department;
      
      // HR can read all users
      allow read: if isHR();
      
      // Anyone can create their own account (self-registration)
      allow create: if request.auth.token.email == email;
      
      // Users can update their own profile (except role/department)
      allow update: if isSignedIn() && 
                       request.auth.token.email == email &&
                       request.resource.data.role == resource.data.role &&
                       request.resource.data.department == resource.data.department;
      
      // Only directors can delete users
      allow delete: if isDirector();
    }
    
    // ========================================
    // Projects Collection
    // ========================================
    match /projects/{projectId} {
      // Directors can read/write all projects
      allow read, write: if isDirector();
      
      // Managers can read projects in their department OR projects they're members of
      allow read: if isManager() && 
                     (getUserDepartment() == resource.data.department ||
                      isProjectMember(resource.data));
      
      // HR can read all projects (read-only)
      allow read: if isHR();
      
      // Staff can read projects they're members of
      allow read: if isStaff() && isProjectMember(resource.data);
      
      // Anyone (Staff, Manager, Director) can create projects
      allow create: if isSignedIn() && !isHR();
      
      // Project members can update if they're involved
      allow update: if isProjectMember(resource.data) && !isHR();
      
      // Only the creator can delete their project
      allow delete: if isOwner(resource.data);
    }
    
    // ========================================
    // Tasks Collection
    // ========================================
    match /tasks/{taskId} {
      // Directors can do everything
      allow read, write, delete: if isDirector();
      
      // Check if task has a project
      function hasProject(taskData) {
        return taskData.projectId != null && taskData.projectId != '';
      }
      
      // Get the project for this task (only if it has one)
      function getProject(taskData) {
        return hasProject(taskData) ? 
          get(/databases/$(database)/documents/projects/$(taskData.projectId)).data : 
          null;
      }
      
      // Check if user is involved in this task
      function isTaskMember(taskData) {
        return request.auth.token.email == taskData.taskOwner ||
               request.auth.token.email == taskData.assignedTo ||
               (taskData.collaborators != null && request.auth.token.email in taskData.collaborators) ||
               request.auth.token.email == taskData.createdBy;
      }
      
      // Check if user can access the project (if task has one)
      function canAccessProject(taskData) {
        let projectData = getProject(taskData);
        return projectData == null || // No project = always accessible
               request.auth.token.email in projectData.members ||
               request.auth.token.email == projectData.createdBy ||
               (isManager() && getUserDepartment() == projectData.department);
      }
      
      // Managers can read:
      // 1. Tasks without projects that they're members of
      // 2. Tasks in projects they have access to
      // 3. Tasks they're personally involved in
      allow read: if isManager() && 
                     (isTaskMember(resource.data) || canAccessProject(resource.data));
      
      // HR can read all tasks (read-only)
      allow read: if isHR();
      
      // Staff can read tasks they're involved in
      allow read: if isStaff() && isTaskMember(resource.data);
      
      // Anyone can create tasks (project is optional)
      allow create: if isSignedIn() && 
                       !isHR() &&
                       // If task has a project, user must be a member of that project
                       (!hasProject(request.resource.data) ||
                        request.auth.token.email in get(/databases/$(database)/documents/projects/$(request.resource.data.projectId)).data.members);
      
      // Anyone involved in the task can update it
      // EXCEPT deadline can only be changed by owner
      allow update: if isTaskMember(resource.data) && 
                       !isHR() &&
                       // If deadline is being changed, must be owner or taskOwner
                       (request.resource.data.dueDate == resource.data.dueDate ||
                        request.auth.token.email == resource.data.createdBy ||
                        request.auth.token.email == resource.data.taskOwner);
      
      // Soft delete: anyone involved can mark as deleted
      allow update: if isTaskMember(resource.data) && 
                       request.resource.data.diff(resource.data).affectedKeys().hasOnly(['isDeleted', 'deletedAt', 'deletedBy']);
      
      // Only owner/taskOwner can hard delete
      allow delete: if isTaskMember(resource.data);
    }
    
    // ========================================
    // Subtasks Collection
    // ========================================
    match /subtasks/{subtaskId} {
      // Same logic as tasks
      allow read, write, delete: if isDirector();
      
      function getTask() {
        return get(/databases/$(database)/documents/tasks/$(resource.data.taskId)).data;
      }
      
      function hasProject() {
        return getTask().projectId != null && getTask().projectId != '';
      }
      
      function getProject() {
        return hasProject() ?
          get(/databases/$(database)/documents/projects/$(getTask().projectId)).data :
          null;
      }
      
      function isSubtaskMember(subtaskData) {
        return request.auth.token.email == subtaskData.assignedTo ||
               (subtaskData.collaborators != null && request.auth.token.email in subtaskData.collaborators) ||
               request.auth.token.email == subtaskData.createdBy;
      }
      
      allow read: if isManager() && 
                     (isSubtaskMember(resource.data) ||
                      (!hasProject() || getUserDepartment() == getProject().department));
      
      allow read: if isHR();
      
      allow read: if isStaff() && isSubtaskMember(resource.data);
      
      allow create: if isSignedIn() && !isHR();
      
      allow update: if isSubtaskMember(resource.data) && !isHR() &&
                       (request.resource.data.dueDate == resource.data.dueDate ||
                        request.auth.token.email == resource.data.createdBy);
    }
    
    // ========================================
    // Reports Collection (for generated reports)
    // ========================================
    match /reports/{reportId} {
      // Directors and HR can read all reports
      allow read: if isDirector() || isHR();
      
      // Managers can read team/department reports
      allow read: if isManager() && 
                     (resource.data.scope == 'team' || resource.data.scope == 'department') &&
                     getUserDepartment() == resource.data.department;
      
      // Staff can read their own reports
      allow read: if isStaff() && 
                     resource.data.createdBy == request.auth.token.email &&
                     resource.data.scope == 'personal';
      
      // Staff can create personal reports
      allow create: if isStaff() && 
                        request.resource.data.scope == 'personal' &&
                        request.resource.data.createdBy == request.auth.token.email;
      
      // Managers can create team/department reports
      allow create: if isManager() && 
                        (request.resource.data.scope == 'team' || 
                         request.resource.data.scope == 'department');
      
      // Directors and HR can create any reports
      allow create: if isDirector() || isHR();
    }
    
    // ========================================
    // Other Collections
    // ========================================
    match /notifications/{notificationId} {
      allow read: if isSignedIn() && 
                     resource.data.userId == request.auth.token.email;
      allow write: if isSignedIn();
    }
    
    match /passwordResets/{resetId} {
      allow read, write: if true;
    }
    
    match /loginAttempts/{attemptId} {
      allow read, write: if true;
    }
    
    match /reminders/{reminderId} {
      allow read: if isSignedIn() && 
                     resource.data.userId == request.auth.token.email;
      allow write: if isSignedIn();
    }
  }
}